/*
 * Copyright 2000-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.util.containers;

import com.intellij.openapi.util.Condition;
import com.intellij.openapi.util.Pair;
import com.intellij.util.Functions;
import com.intellij.util.UnmodifiableIterator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.*;

/**
 * A pruned version of com.google.common.collect.TreeTraverser.
 *
 * Views elements of a type {@code T} as nodes in a tree, and provides methods to traverse the trees
 * induced by this traverser.
 *
 * <p>For example, the tree
 *
 * <pre>          {@code
 *          h
 *        / | \
 *       /  e  \
 *      d       g
 *     /|\      |
 *    / | \     f
 *   a  b  c       }</pre>
 *
 * <p>can be iterated over in preorder (hdabcegf), postorder (abcdefgh), or breadth-first order
 * (hdegabcf).
 *
 * <p>Null nodes are strictly forbidden.
 *
 * @author Louis Wasserman
 */
public abstract class TreeTraverser<T> {

  /**
   * Returns the children of the specified node.  Must not contain null.
   */
  @NotNull
  public abstract JBIterable<T> children(@NotNull T root);

  public static abstract class Tracing<T> extends JBIterable<T> {
    @Override
    public abstract TracingIt<T> iterator();
  }

  public interface TracingIt<T> extends Iterator<T> {
    @Nullable
    T parent();

    @NotNull
    JBIterable<T> backtrace();
  }

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order
   * traversal. That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public final Tracing<T> preOrderTraversal(@Nullable final T root) {
    return new Tracing<T>() {
      @Override
      public TracingIt<T> iterator() {
        return new PreOrderIt(root);
      }
    };
  }

  /**
   * @see #preOrderTraversal(T)
   */
  @NotNull
  public final Tracing<T> preOrderTraversal(@NotNull final Iterable<? extends T> roots) {
    return new Tracing<T>() {
      @Override
      public TracingIt<T> iterator() {
        return new PreOrderIt((Iterable<T>)roots);
      }
    };
  }

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   * <p/>
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public final JBIterable<T> postOrderTraversal(@Nullable final T root) {
    return new JBIterable<T>() {
      @Override
      public Iterator<T> iterator() {
        return new PostOrderIt(root);
      }
    };
  }

  /**
   * @see #postOrderTraversal(T)
   */
  @NotNull
  public final JBIterable<T> postOrderTraversal(@NotNull final Iterable<? extends T> roots) {
    return new JBIterable<T>() {
      @Override
      public Iterator<T> iterator() {
        return new PostOrderIt(roots);
      }
    };
  }

  /**
   * Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   * <p/>
   * <p>No guarantees are made about the behavior of the traversal when nodes change while
   * iteration is in progress or when the iterators generated by {@link #children} are advanced.
   */
  @NotNull
  public final JBIterable<T> breadthFirstTraversal(@Nullable final T root) {
    return new JBIterable<T>() {
      @Override
      public Iterator<T> iterator() {
        return new BreadthFirstIterator(root);
      }
    };
  }

  @NotNull
  public final JBIterable<T> breadthFirstTraversal(@NotNull final Iterable<? extends T> roots) {
    return new JBIterable<T>() {
      @Override
      public Iterator<T> iterator() {
        return new BreadthFirstIterator(roots);
      }
    };
  }

  @NotNull
  public final Tracing<T> tracingBreadthFirstTraversal(@Nullable final T root) {
    return new Tracing<T>() {
      @Override
      public TracingIt<T> iterator() {
        return new TracingBreadthFirstIt(root);
      }
    };
  }

  @NotNull
  public final Tracing<T> tracingBreadthFirstTraversal(@NotNull final Iterable<? extends T> roots) {
    return new Tracing<T>() {
      @Override
      public TracingIt<T> iterator() {
        return new TracingBreadthFirstIt(roots);
      }
    };
  }

  private abstract static class It<T> extends UnmodifiableIterator<T> {

    It() {
      super(null);
    }

  }

  private abstract static class DfsIt<T> extends It<T> implements TracingIt<T> {
    final ArrayDeque<Pair<T, Iterator<T>>> stack = new ArrayDeque<Pair<T, Iterator<T>>>();

    @Override
    public boolean hasNext() {
      return !stack.isEmpty();
    }

    @Nullable
    public T parent() {
      Iterator<Pair<T, Iterator<T>>> it = stack.descendingIterator();
      it.next();
      return it.hasNext() ? it.next().first : null;
    }

    @NotNull
    public JBIterable<T> backtrace() {
      return new JBIterable<Pair<T, Iterator<T>>>() {
        @Override
        public Iterator<Pair<T, Iterator<T>>> iterator() {
          Iterator<Pair<T, Iterator<T>>> iterator = stack.descendingIterator();
          iterator.next();
          return iterator;
        }
      }.transform(Functions.<T>pairFirst()).filter(Condition.NOT_NULL);
    }
  }

  private final class PreOrderIt extends DfsIt<T> {

    int doneCount;

    PreOrderIt(@Nullable T root) {
      if (root != null) {
        stack.addLast(Pair.<T, Iterator<T>>create(null, new SingletonIterator<T>(root)));
      }
    }

    PreOrderIt(@NotNull Iterable<T> roots) {
      Iterator<T> iterator = roots.iterator();
      if (iterator.hasNext()) {
        stack.addLast(Pair.<T, Iterator<T>>create(null, iterator));
      }
    }

    @Override
    public boolean hasNext() {
      return stack.size() > doneCount;
    }

    @Override
    public T next() {
      Pair<T, Iterator<T>> top;
      while (!(top = stack.getLast()).second.hasNext()) {
        stack.removeLast();
        doneCount--;
      }
      T result = top.second.next();
      if (!top.second.hasNext()) doneCount++;
      Iterator<T> childItr = children(result).iterator();
      stack.addLast(Pair.create(result, childItr));
      if (!childItr.hasNext()) doneCount++;
      return result;
    }
  }

  private final class PostOrderIt extends DfsIt<T> {

    PostOrderIt(@Nullable T root) {
      if (root != null) {
        stack.addLast(Pair.create(root, children(root).iterator()));
      }
    }

    PostOrderIt(@NotNull Iterable<? extends T> roots) {
      for (T root : roots) {
        stack.addLast(Pair.create(root, children(root).iterator()));
      }
    }

    @Override
    public T next() {
      while (!stack.isEmpty()) {
        Pair<T, Iterator<T>> top = stack.getLast();
        if (top.second.hasNext()) {
          T child = top.second.next();
          stack.addLast(Pair.create(child, children(child).iterator()));
        }
        else {
          stack.removeLast();
          return top.first;
        }
      }
      throw new NoSuchElementException();
    }
  }

  private class BfsIterator extends It<T> {
    final Deque<T> queue = new ArrayDeque<T>();

    BfsIterator(@Nullable T root) {
      if (root != null) {
        queue.add(root);
      }
    }

    BfsIterator(@NotNull Iterable<? extends T> roots) {
      for (T root : roots) {
        queue.add(root);
      }
    }

    @Override
    public boolean hasNext() {
      return !queue.isEmpty();
    }

    public T peek() {
      return queue.element();
    }

    @Override
    public T next() {
      T result = queue.remove();
      for (T t : children(result)) queue.add(t);
      return result;
    }

  }

  private final class BreadthFirstIterator extends BfsIterator {
    BreadthFirstIterator(@Nullable T root) {
      super(root);
    }

    BreadthFirstIterator(@NotNull Iterable<? extends T> roots) {
      super(roots);
    }
  }

  private final class TracingBreadthFirstIt extends BfsIterator implements TracingIt<T> {
    final Map<T, T> paths = ContainerUtil.newTroveMap();
    T cur;

    TracingBreadthFirstIt(@Nullable T root) {
      super(root);
    }

    TracingBreadthFirstIt(@NotNull Iterable<? extends T> roots) {
      super(roots);
    }

    @Override
    public T next() {
      T result = queue.remove();
      for (T t : children(result)) {
        if (paths.containsKey(t)) continue;
        queue.add(t);
        paths.put(t, result);
      }
      return cur = result;
    }

    @Override
    public T parent() {
      return paths.get(cur);
    }

    @NotNull
    @Override
    public JBIterable<T> backtrace() {
      final T first = cur;
      return new JBIterable<T>() {
        @Override
        public Iterator<T> iterator() {
          return new It<T>() {
            T cur = first;

            @Override
            public boolean hasNext() {
              return cur != null;
            }

            @Override
            public T next() {
              T result = cur;
              cur = paths.get(cur);
              return result;
            }
          };
        }
      };
    }
  }
}
